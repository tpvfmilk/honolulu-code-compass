
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://kxwqwwhvapmdefrsvjsb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4d3F3d2h2YXBtZGVmcnN2anNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0NDM1NjksImV4cCI6MjA2MzAxOTU2OX0.ENylIyPIBwfCnvWGpGBIHXQWBnaCg7ZEJy2trDSRwdM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
  },
  db: {
    schema: 'public',
  },
});

// Add error handling for RLS errors
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    console.log('User signed out');
  } else if (event === 'SIGNED_IN') {
    console.log('User signed in');
  }
});

// Helper function to handle database errors
export const handleSupabaseError = (error: any, context: string = 'operation'): void => {
  console.error(`Supabase ${context} error:`, error);
  
  // Check if it's an RLS error
  if (error?.message?.includes('Row Security Policy')) {
    toast.error(`Access denied: You don't have permission for this ${context}.`);
  } else {
    toast.error(`Failed to perform ${context}. Please try again.`);
  }
};

// Generic fetch function with error handling
export async function fetchFromSupabase(table: string, options: any = {}) {
  try {
    const { data, error } = await supabase.from(table).select(options.select || '*');
    
    if (error) {
      handleSupabaseError(error, `fetching ${table}`);
      return [];
    }
    
    return data || [];
  } catch (error) {
    handleSupabaseError(error, `fetching ${table}`);
    return [];
  }
}
